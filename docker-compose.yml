services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: fund-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: lakuna1911
      POSTGRES_DB: interopera_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_pgvector/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d interopera_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fund-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fund-backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://postgres:lakuna1911@postgres:5432/interopera_db
      REDIS_URL: redis://redis:6379/0
      UPLOAD_DIR: /app/uploads
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh /app/entrypoint.sh

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fund-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
    # volumes:
    #   - ./frontend:/app
    depends_on:
      - backend
    command: npm start

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
